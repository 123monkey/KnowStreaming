<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BrokerMetricsDao">
	<resultMap id="BrokerMetricsMap" type="BrokerMetrics">
		<id property="id" column="id" />
		<result property="clusterId" column="cluster_id" />
		<result property="brokerId" column="broker_id" />
		<result property="bytesInPerSec" column="bytes_in" />
		<result property="bytesOutPerSec" column="bytes_out" />
		<result property="messagesInPerSec" column="messages_in" />
		<result property="bytesRejectedPerSec" column="bytes_rejected" />
		<result property="failFetchRequestPerSec" column="fail_fetch_request" />
		<result property="failProduceRequestPerSec" column="fail_produce_request" />
		<result property="fetchConsumerRequestPerSec" column="fetch_consumer_request" />
		<result property="produceRequestPerSec" column="produce_request" />
		<result property="requestHandlerAvgIdlePercent" column="request_handler_idl_percent" />
		<result property="networkProcessorAvgIdlePercent" column="network_processor_idl_percent" />
		<result property="requestQueueSize" column="request_queue_size" />
		<result property="responseQueueSize" column="response_queue_size" />
		<result property="logFlushRateAndTimeMs" column="log_flush_time" />
		<result property="totalTimeProduceMean" column="total_time_produce_mean" />
		<result property="totalTimeProduce99Th" column="total_time_produce_99th" />
		<result property="totalTimeFetchConsumerMean" column="total_time_fetch_consumer_mean" />
		<result property="totalTimeFetchConsumer99Th" column="total_time_fetch_consumer_99th" />
		<result property="gmtCreate" column="gmt_create" />
	</resultMap>

	<insert id="batchAdd" parameterType="java.util.List">
		INSERT INTO broker_metrics (cluster_id, broker_id, bytes_in, bytes_out, messages_in, bytes_rejected, fail_fetch_request, fail_produce_request, fetch_consumer_request, produce_request, request_handler_idl_percent, network_processor_idl_percent, request_queue_size, response_queue_size, log_flush_time, total_time_produce_mean, total_time_produce_99th, total_time_fetch_consumer_mean, total_time_fetch_consumer_99th, gmt_create)
		VALUES
		<foreach item="BrokerMetrics" index="index" collection="list" separator=",">
			(#{BrokerMetrics.clusterId}, #{BrokerMetrics.brokerId}, #{BrokerMetrics.bytesInPerSec}, #{BrokerMetrics.bytesOutPerSec}, #{BrokerMetrics.messagesInPerSec}, #{BrokerMetrics.bytesRejectedPerSec}, #{BrokerMetrics.failFetchRequestPerSec}, #{BrokerMetrics.failProduceRequestPerSec}, #{BrokerMetrics.fetchConsumerRequestPerSec}, #{BrokerMetrics.produceRequestPerSec}, #{BrokerMetrics.requestHandlerAvgIdlePercent}, #{BrokerMetrics.networkProcessorAvgIdlePercent}, #{BrokerMetrics.requestQueueSize}, #{BrokerMetrics.responseQueueSize}, #{BrokerMetrics.logFlushRateAndTimeMs}, #{BrokerMetrics.totalTimeProduceMean}, #{BrokerMetrics.totalTimeProduce99Th}, #{BrokerMetrics.totalTimeFetchConsumerMean}, #{BrokerMetrics.totalTimeFetchConsumer99Th}, now())
		</foreach>
	</insert>

	<select id="getBrokerMetricsByInterval" parameterType="java.util.Map" resultMap="BrokerMetricsMap">
		<![CDATA[
		SELECT * FROM broker_metrics WHERE cluster_id = #{clusterId} AND broker_id = #{brokerId} AND gmt_create BETWEEN #{startTime} AND #{endTime} ORDER BY gmt_create ASC
	]]>
	</select>

	<delete id="deleteBeforeTime" parameterType="java.util.Date">
		<![CDATA[
		DELETE FROM broker_metrics WHERE gmt_create < #{endTime} LIMIT 1000
	]]>
	</delete>
</mapper>