<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
	   <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
	   <!--xmlns:context="http://www.springframework.org/schema/context"-->
	   <!--xmlns:tx="http://www.springframework.org/schema/tx"-->
	   <!--xsi:schemaLocation="http://www.springframework.org/schema/beans-->
 <!--http://www.springframework.org/schema/beans/spring-beans-3.0.xsd-->
 <!--http://www.springframework.org/schema/context-->
 <!--http://www.springframework.org/schema/context/spring-context-3.0.xsd-->
 <!--http://www.springframework.org/schema/tx-->
 <!--http://www.springframework.org/schema/tx/spring-tx-3.0.xsd-->
 <!--http://www.springframework.org/schema/aop-->
 <!--http://www.springframework.org/schema/aop/spring-aop-3.0.xsd-->
 <!--">-->
	<!--<context:component-scan base-package="com.xiaojukeji.kafka.manager.dao.*" />-->

	<!--&lt;!&ndash; 第一个数据源 &ndash;&gt;-->
	<!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
		<!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
		<!--<property name="url" value="${spring.datasource.kafka-manager.url}" />-->
		<!--<property name="username" value="${spring.datasource.kafka-manager.username}" />-->
		<!--<property name="password" value="${spring.datasource.kafka-manager.password}" />-->

		<!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
		<!--<property name="initialSize" value="2" />-->
		<!--<property name="minIdle" value="2" />-->
		<!--<property name="maxActive" value="10" />-->

		<!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
		<!--<property name="maxWait" value="60000" />-->

		<!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
		<!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->

		<!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
		<!--<property name="minEvictableIdleTimeMillis" value="120000" />-->

		<!--<property name="validationQuery" value="SELECT 1" />-->
		<!--<property name="testWhileIdle" value="true" />-->
		<!--<property name="testOnBorrow" value="false" />-->
		<!--<property name="testOnReturn" value="false" />-->

		<!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
		<!--<property name="poolPreparedStatements" value="false" />-->
		<!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />-->

		<!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
		<!--<property name="filters" value="stat" />-->

		<!--<property name="proxyFilters">-->
			<!--<list>-->
				<!--<ref bean="log-filter"/>-->
			<!--</list>-->
		<!--</property>-->


	<!--</bean>-->
	<!--<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4j2Filter">-->
		<!--&lt;!&ndash; 所有连接相关的日志 &ndash;&gt;-->
		<!--<property name="connectionLogEnabled" value="false"/>-->
		<!--&lt;!&ndash; 所有Statement相关的日志 &ndash;&gt;-->
		<!--<property name="statementLogEnabled" value="false"/>-->
		<!--&lt;!&ndash; 是否显示结果集 &ndash;&gt;-->
		<!--<property name="resultSetLogEnabled" value="true"/>-->
		<!--&lt;!&ndash; 是否显示SQL语句 &ndash;&gt;-->
		<!--<property name="statementExecutableSqlLogEnable" value="true"/>-->

	<!--</bean>-->


	<!--&lt;!&ndash; Sql会话工厂 &ndash;&gt;-->
	<!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
		<!--<property name="dataSource" ref="dataSource" />-->

		<!--<property name="mapperLocations" value="classpath:mapper/*.xml" />-->

		<!--<property name="configLocation" value="classpath:mybatis-config.xml" />-->
	<!--</bean>-->

	<!--&lt;!&ndash; Sql会话对象 &ndash;&gt;-->
	<!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
		<!--<constructor-arg index="0" ref="sqlSessionFactory" />-->
	<!--</bean>-->

	<!--<bean id="transactionManager"-->
		<!--class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
		<!--<property name="dataSource" ref="dataSource" />-->
	<!--</bean>-->
	<!--<bean id="transactionTemplate"-->
		  <!--class="org.springframework.transaction.support.TransactionTemplate">-->
		<!--<property name="transactionManager" ref="transactionManager" />-->
	<!--</bean>-->

	<!--<tx:annotation-driven transaction-manager="transactionManager" />-->
<!--</beans>-->
